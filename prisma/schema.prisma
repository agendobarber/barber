generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  role          String      @default("user") // "user" ou "admin"
  barbershopId  String? // somente admins
  barbershop    Barbershop? @relation("BarbershopAdmins", fields: [barbershopId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Barbershop {
  id            String              @id @default(uuid())
  name          String
  address       String
  phones        String[]
  description   String
  imageUrl      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  services      BarbershopService[]
  admins        User[]              @relation("BarbershopAdmins")
  professionals Professional[] // 👈 relação com os profissionais
}

model Professional {
  id           String     @id @default(uuid())
  name         String
  status       Int        @default(1)
  email        String     @unique
  phone        String?
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[] // <- lado oposto
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id             String            @id @default(uuid())
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  professionalId String?
  professional   Professional?     @relation(fields: [professionalId], references: [id])
  date           DateTime
  durationMinutes Int              @default(30) // <-- NOVO: duração do agendamento em minutos
  endDate        DateTime         // ⏱️ horário de término do agendamento        
  status         Int               @default(1)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())

  services       BookingService[]  // 👈 relação N:N com serviços
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BarbershopService {
  id           String            @id @default(uuid())
  name         String
  description  String
  price        Decimal           @db.Decimal(10, 2)
  tempo        Int               @default(0)             // ⏱️ novo campo: duração em minutos
  barbershopId String
  status       Int               @default(1)
  barbershop   Barbershop        @relation(fields: [barbershopId], references: [id])
  bookingLinks BookingService[]  // 👈 ligação com BookingService
}

model BookingService {
  id         String            @id @default(uuid())
  bookingId  String
  booking    Booking           @relation(fields: [bookingId], references: [id])
  serviceId  String
  service    BarbershopService @relation(fields: [serviceId], references: [id])
}